'use strict';

exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var defaultRaw = {
    colon: ': ',
    indent: '  ',
    commentLeft: ' ',
    commentRight: ' '
};

var Stringifier = function () {
    function Stringifier(builder) {
        _classCallCheck(this, Stringifier);

        this.builder = builder;
    }

    Stringifier.prototype.stringify = function stringify(node, semicolon) {
        this[node.type](node, semicolon);
    };

    Stringifier.prototype.root = function root(node) {
        this.body(node);
        if (node.raws.after) this.builder(node.raws.after);
    };

    Stringifier.prototype.comment = function comment(node) {
        var left = defaultRaw.commentLeft;
        var right = defaultRaw.commentRight;
        if (this.has(node.raws.left)) left = node.raws.left;

        if (node.raws.inline) {
            if (this.has(node.raws.inlineRight)) {
                right = node.raws.inlineRight;
            } else {
                right = '';
            }
            this.builder('//' + left + node.text + right, node);
        } else {
            if (this.has(node.raws.right)) right = node.raws.right;
            this.builder('/*' + left + node.text + right + '*/', node);
        }
    };

    Stringifier.prototype.decl = function decl(node) {
        var between = node.raws.between || defaultRaw.colon;
        var string = node.prop + between + this.rawValue(node, 'value');

        if (node.important) {
            string += node.raws.important || ' !important';
        }

        this.builder(string, node);
    };

    Stringifier.prototype.rule = function rule(node) {
        this.block(node, this.rawValue(node, 'selector'));
    };

    Stringifier.prototype.atrule = function atrule(node) {
        var name = '@' + node.name;
        var params = node.params ? this.rawValue(node, 'params') : '';

        if (this.has(node.raws.afterName)) {
            name += node.raws.afterName;
        } else if (params) {
            name += ' ';
        }

        this.block(node, name + params);
    };

    Stringifier.prototype.body = function body(node) {
        var indent = node.root().raws.indent || defaultRaw.indent;

        for (var i = 0; i < node.nodes.length; i++) {
            var child = node.nodes[i];
            var before = child.raws.before.replace(/[^\n]*$/, '') + this.indent(node, indent);
            if (before) this.builder(before);
            this.stringify(child);
        }
    };

    Stringifier.prototype.block = function block(node, start) {
        var between = node.raws.sssBetween || '';
        this.builder(start + between, node, 'start');
        if (this.has(node.nodes)) this.body(node);
    };

    Stringifier.prototype.indent = function indent(node, step) {
        var result = '';
        while (node.parent) {
            result += step;
            node = node.parent;
        }
        return result;
    };

    Stringifier.prototype.has = function has(value) {
        return typeof value !== 'undefined';
    };

    Stringifier.prototype.rawValue = function rawValue(node, prop) {
        var value = node[prop];
        var raw = node.raws[prop];
        if (raw && raw.value === value) {
            return raw.sss || raw.raw;
        } else {
            return value;
        }
    };

    return Stringifier;
}();

exports.default = Stringifier;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,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O0FBQ0gsU0FGRCxNQUVPO0FBQ0gsbUJBQU8sS0FBUDtBQUNIO0FBQ0osSzs7Ozs7a0JBcEdnQixXIiwiZmlsZSI6InN0cmluZ2lmaWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZGVmYXVsdFJhdyA9IHtcbiAgICBjb2xvbjogICAgICAgICc6ICcsXG4gICAgaW5kZW50OiAgICAgICAnICAnLFxuICAgIGNvbW1lbnRMZWZ0OiAgJyAnLFxuICAgIGNvbW1lbnRSaWdodDogJyAnXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdHJpbmdpZmllciB7XG5cbiAgICBjb25zdHJ1Y3RvcihidWlsZGVyKSB7XG4gICAgICAgIHRoaXMuYnVpbGRlciA9IGJ1aWxkZXI7XG4gICAgfVxuXG4gICAgc3RyaW5naWZ5KG5vZGUsIHNlbWljb2xvbikge1xuICAgICAgICB0aGlzW25vZGUudHlwZV0obm9kZSwgc2VtaWNvbG9uKTtcbiAgICB9XG5cbiAgICByb290KG5vZGUpIHtcbiAgICAgICAgdGhpcy5ib2R5KG5vZGUpO1xuICAgICAgICBpZiAoIG5vZGUucmF3cy5hZnRlciApIHRoaXMuYnVpbGRlcihub2RlLnJhd3MuYWZ0ZXIpO1xuICAgIH1cblxuICAgIGNvbW1lbnQobm9kZSkge1xuICAgICAgICBsZXQgbGVmdCAgPSBkZWZhdWx0UmF3LmNvbW1lbnRMZWZ0O1xuICAgICAgICBsZXQgcmlnaHQgPSBkZWZhdWx0UmF3LmNvbW1lbnRSaWdodDtcbiAgICAgICAgaWYgKCB0aGlzLmhhcyhub2RlLnJhd3MubGVmdCkgKSBsZWZ0ID0gbm9kZS5yYXdzLmxlZnQ7XG5cbiAgICAgICAgaWYgKCBub2RlLnJhd3MuaW5saW5lICkge1xuICAgICAgICAgICAgaWYgKCB0aGlzLmhhcyhub2RlLnJhd3MuaW5saW5lUmlnaHQpICkge1xuICAgICAgICAgICAgICAgIHJpZ2h0ID0gbm9kZS5yYXdzLmlubGluZVJpZ2h0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByaWdodCA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5idWlsZGVyKCcvLycgKyBsZWZ0ICsgbm9kZS50ZXh0ICsgcmlnaHQsIG5vZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCB0aGlzLmhhcyhub2RlLnJhd3MucmlnaHQpICkgcmlnaHQgPSBub2RlLnJhd3MucmlnaHQ7XG4gICAgICAgICAgICB0aGlzLmJ1aWxkZXIoJy8qJyArIGxlZnQgKyBub2RlLnRleHQgKyByaWdodCArICcqLycsIG5vZGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVjbChub2RlKSB7XG4gICAgICAgIGxldCBiZXR3ZWVuID0gbm9kZS5yYXdzLmJldHdlZW4gfHwgZGVmYXVsdFJhdy5jb2xvbjtcbiAgICAgICAgbGV0IHN0cmluZyAgPSBub2RlLnByb3AgKyBiZXR3ZWVuICsgdGhpcy5yYXdWYWx1ZShub2RlLCAndmFsdWUnKTtcblxuICAgICAgICBpZiAoIG5vZGUuaW1wb3J0YW50ICkge1xuICAgICAgICAgICAgc3RyaW5nICs9IG5vZGUucmF3cy5pbXBvcnRhbnQgfHwgJyAhaW1wb3J0YW50JztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYnVpbGRlcihzdHJpbmcsIG5vZGUpO1xuICAgIH1cblxuICAgIHJ1bGUobm9kZSkge1xuICAgICAgICB0aGlzLmJsb2NrKG5vZGUsIHRoaXMucmF3VmFsdWUobm9kZSwgJ3NlbGVjdG9yJykpO1xuICAgIH1cblxuICAgIGF0cnVsZShub2RlKSB7XG4gICAgICAgIGxldCBuYW1lICAgPSAnQCcgKyBub2RlLm5hbWU7XG4gICAgICAgIGxldCBwYXJhbXMgPSBub2RlLnBhcmFtcyA/IHRoaXMucmF3VmFsdWUobm9kZSwgJ3BhcmFtcycpIDogJyc7XG5cbiAgICAgICAgaWYgKCB0aGlzLmhhcyhub2RlLnJhd3MuYWZ0ZXJOYW1lKSApIHtcbiAgICAgICAgICAgIG5hbWUgKz0gbm9kZS5yYXdzLmFmdGVyTmFtZTtcbiAgICAgICAgfSBlbHNlIGlmICggcGFyYW1zICkge1xuICAgICAgICAgICAgbmFtZSArPSAnICc7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmJsb2NrKG5vZGUsIG5hbWUgKyBwYXJhbXMpO1xuICAgIH1cblxuICAgIGJvZHkobm9kZSkge1xuICAgICAgICBsZXQgaW5kZW50ID0gbm9kZS5yb290KCkucmF3cy5pbmRlbnQgfHwgZGVmYXVsdFJhdy5pbmRlbnQ7XG5cbiAgICAgICAgZm9yICggbGV0IGkgPSAwOyBpIDwgbm9kZS5ub2Rlcy5sZW5ndGg7IGkrKyApIHtcbiAgICAgICAgICAgIGxldCBjaGlsZCAgPSBub2RlLm5vZGVzW2ldO1xuICAgICAgICAgICAgbGV0IGJlZm9yZSA9IGNoaWxkLnJhd3MuYmVmb3JlLnJlcGxhY2UoL1teXFxuXSokLywgJycpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGVudChub2RlLCBpbmRlbnQpO1xuICAgICAgICAgICAgaWYgKCBiZWZvcmUgKSB0aGlzLmJ1aWxkZXIoYmVmb3JlKTtcbiAgICAgICAgICAgIHRoaXMuc3RyaW5naWZ5KGNoaWxkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGJsb2NrKG5vZGUsIHN0YXJ0KSB7XG4gICAgICAgIGxldCBiZXR3ZWVuID0gbm9kZS5yYXdzLnNzc0JldHdlZW4gfHwgJyc7XG4gICAgICAgIHRoaXMuYnVpbGRlcihzdGFydCArIGJldHdlZW4sIG5vZGUsICdzdGFydCcpO1xuICAgICAgICBpZiAoIHRoaXMuaGFzKG5vZGUubm9kZXMpICkgdGhpcy5ib2R5KG5vZGUpO1xuICAgIH1cblxuICAgIGluZGVudChub2RlLCBzdGVwKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSAnJztcbiAgICAgICAgd2hpbGUgKCBub2RlLnBhcmVudCApIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBzdGVwO1xuICAgICAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgaGFzKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnO1xuICAgIH1cblxuICAgIHJhd1ZhbHVlKG5vZGUsIHByb3ApIHtcbiAgICAgICAgbGV0IHZhbHVlID0gbm9kZVtwcm9wXTtcbiAgICAgICAgbGV0IHJhdyAgID0gbm9kZS5yYXdzW3Byb3BdO1xuICAgICAgICBpZiAoIHJhdyAmJiByYXcudmFsdWUgPT09IHZhbHVlICkge1xuICAgICAgICAgICAgcmV0dXJuIHJhdy5zc3MgfHwgcmF3LnJhdztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuIl19